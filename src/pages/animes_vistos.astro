---
import Layout from "../layouts/Layout.astro";
import ArrowLSvg from "../SVGs/Arrow_L_svg.astro";
import ArrowRSvg from "../SVGs/Arrow_R_svg.astro";
import TrashsSvg from "../SVGs/Trash_svg.astro";
---

<Layout title="Animes Vistos" bg_color="bg-neutral-950">
    <main id="top" class="font-mono text-zinc-300 p-6">
        <a
            href="#top"
            class="fixed text-white flex items-center justify-center font-bold bottom-0 right-0 mb-2 mr-2 w-11 h-11 z-10 bg-zinc-800 rounded-full hover:bg-orange-800"
        >
            ↑
        </a>
        <h1 id="title" class="text-center text-white text-4xl mb-6">
            Animes Vistos
        </h1>
        <div
            id="search-container"
            class="flex items-center justify-center mb-6 gap-1"
        >
            <input
                type="text"
                id="search-input"
                class="p-2 w-80 max-w-xs border-zinc-400 border-2 rounded-l-md bg-zinc-900 text-zinc-300"
                placeholder="Buscar por nombre..."
            />

            <button
                id="clear-button"
                class="bg-zinc-700 border-2 border-zinc-400 hover:text-white text-zinc-300 rounded-r-md p-2 hover:bg-orange-800 transition-all"
            >
                <TrashsSvg />
            </button>
        </div>

        <div
            id="animes"
            class="flex flex-wrap justify-center transition-opacity duration-500"
        >
        </div>

        <div
            id="pagination"
            class="flex justify-center items-center space-x-4 mt-6"
        >
            <button
                id="prev-page"
                class="bg-zinc-800 text-white rounded-md py-2.5 pr-4 pl-3 hover:bg-orange-800 transition-all flex items-center gap-1 disabled:opacity-50 disabled:hover:bg-zinc-800"
                disabled
            >
                <ArrowLSvg /> Anterior
            </button>
            <button
                id="next-page"
                class="bg-zinc-800 text-white rounded-md m- py-2.5 pr-3 pl-4 hover:bg-orange-800 transition-all flex items-center gap-1 disabled:opacity-50 disabled:hover:bg-zinc-800"
            >
                Siguiente <ArrowRSvg />
            </button>
        </div>
        <footer
            class="text-zinc-600 text-center text-sm mt-6 mb-1 tracking-tight"
        >
            Esta lista comprende todos los animes randoms vistos en el canal del
            Saiko y uno que otro anime que el Saiko se vio una vez por su cuenta
            (puede faltar alguno) <br />
            Postdata: VIVAN LAS LESBIANAS!!!!
        </footer>
    </main>
</Layout>

<style>
    html {
        scroll-behavior: smooth;
    }

    /* BARRA DE DESPLAZAMIENTO */
    /* Estilos para la barra de desplazamiento en WebKit (Safari, Chrome, Opera) */
    html::-webkit-scrollbar {
        /*Ancho de la barra de desplazamiento*/
        width: 10px;
    }

    html::-webkit-scrollbar-track {
        /*Color del fondo de la barra de desplazamiento*/
        background: #464545;
    }

    html::-webkit-scrollbar-thumb {
        /* Color de la barra por default */
        background: linear-gradient(
            45deg,
            #ff8c00,
            #ffa500,
            #ffb347,
            #ffcc33,
            #ff7043,
            #ff5722
        );
        /* Radio de los bordes de la barra de desplazamiento */
        border-radius: 5px;
    }

    html::-webkit-scrollbar-thumb:hover {
        /* Cambio de color al pasar el mouse sobre la barra de desplazamiento */
        background: #a5a3a3;
        /* // background: linear-gradient(45deg, #5b33b9, #704bb6, #89379e, #b635a0, #b42655, #da2727); */
    }
</style>

<script>
    // Se importa el archivo de datos de los animes
    import data from "../assets/anime_list.json";

    // Se agregan eventos de DOMContentLoaded para que se ejecute el código cuando se cargue la página
    document.addEventListener("DOMContentLoaded", () => {
        const searchInput = document.getElementById(
            "search-input",
        ) as HTMLInputElement;
        const clearButton = document.getElementById("clear-button");
        const animesDiv = document.getElementById("animes");
        const prevPageButton = document.getElementById(
            "prev-page",
        ) as HTMLButtonElement;
        const nextPageButton = document.getElementById(
            "next-page",
        ) as HTMLButtonElement;

        let filteredData = data;
        let currentPage = 0;
        const pageSize = 50;

        function loadAnimes() {
            const start = currentPage * pageSize;
            const end = start + pageSize;
            return filteredData.slice(start, end);
        }

        function displayAnimes() {
            animesDiv.classList.add("opacity-0"); // Inicia con opacidad 0
            setTimeout(() => {
                animesDiv.innerHTML = ""; // Limpiar el contenido existente
                loadAnimes().forEach((anime) => {
                    const notaColor =
                        anime.nota === "goty"
                            ? "text-yellow-950 bg-gradient-to-r from-yellow-500 to-orange-400 px-2 py-1 rounded-md transition-all"
                            : anime.nota === "god"
                              ? "text-white bg-green-700 px-2 py-1 rounded-md transition-all"
                              : typeof anime.nota === "string" &&
                                  anime.nota.includes("wena")
                                ? "text-white bg-green-600 px-2 py-1 rounded-md transition-all"
                                : "text-red-100 px-2 py-1"; // Otras notas

                    animesDiv.innerHTML += `
                    <div class="bg-zinc-900 rounded-lg shadow-lg p-4 md:m-2 m-0.5 md:max-w-xs flex flex-col items-center text-center transition-transform duration-300 hover:shadow-xl hover:-translate-y-1">
                        <h2 class="text-white text-lg mt-1 mb-1 truncate w-24 md:w-full">
                            ${anime.nombre.length > 14 ? anime.nombre.substring(0, 14) + "..." : anime.nombre}
                        </h2>
                        <p class="text-zinc-400 text-sm pb-2">ID: ${anime.id}</p>
                        <img src="${anime.url}" alt="${anime.nombre}" class="w-[120px] h-[200px] sm:w-[200px] sm:h-[305px] rounded-lg mb-2"/>
                        <p class="${notaColor} font-sans text-sm mt-2 tracking-widest uppercase font-bold">${anime.nota ? anime.nota : "..."}</p> 
                    </div>
                `;
                });
                animesDiv.classList.remove("opacity-0"); // Cambia a opacidad 1
            }, 200); // Tiempo de retraso para la animación
        }

        searchInput.addEventListener("input", () => {
            const query = searchInput.value.trim().toLowerCase();
            filteredData = data.filter((anime) =>
                anime.nombre.toLowerCase().includes(query),
            );
            currentPage = 0; // Resetear a la primera página
            displayAnimes();
            updatePaginationButtons();
        });

        clearButton.addEventListener("click", () => {
            searchInput.value = "";
            searchInput.dispatchEvent(new Event("input")); // Desencadenar evento de búsqueda
        });

        nextPageButton.addEventListener("click", () => {
            if (currentPage * pageSize < filteredData.length) {
                currentPage++;
                displayAnimes();
                updatePaginationButtons();
            }
        });

        prevPageButton.addEventListener("click", () => {
            if (currentPage > 0) {
                currentPage--;
                displayAnimes();
                updatePaginationButtons();
            }
        });

        function updatePaginationButtons() {
            prevPageButton.disabled = currentPage === 0;
            nextPageButton.disabled =
                (currentPage + 1) * pageSize >= filteredData.length;
        }

        displayAnimes(); // Mostrar animes al cargar la página
    });
</script>
